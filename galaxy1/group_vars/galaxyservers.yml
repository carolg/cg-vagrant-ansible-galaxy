

# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy

postgresql_objects_databases:
  - name: galaxy
    owner: galaxy

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_22.05
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: false

galaxy_config:
  galaxy:
    brand: "ðŸ§¬ðŸ”¬ðŸš€"
    admin_users: admin@example.org
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"

  gravity:
    galaxy_root: "{{ galaxy_root }}/server"
    app_server: gunicorn
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      extra_args: '--forwarded-allow-ips="*"'
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 3
        pools:
          - job-handler
          - workflow-scheduler

# systemd
galaxy_manage_systemd: true

# Certbot
#
# Commented: This is a vagrant test without SSL
#
#certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
#certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
#certbot_auth_method: --webroot
#certbot_install_method: virtualenv
#certbot_auto_renew: yes
#certbot_auto_renew_user: root
#certbot_environment: staging
#certbot_well_known_root: /srv/nginx/_well-known_root
#certbot_share_key_users:
#  - nginx
#certbot_post_renewal: |
#    systemctl restart nginx || true
#certbot_domains:
# - "{{ inventory_hostname }}"
#certbot_agree_tos: --agree-tos


# NGINX
nginx_selinux_allow_local_connections: true
#nginx_servers:
#  - galaxy
#  - redirect-ssl         # Commented: This is a vagrant test without SSL
#nginx_ssl_servers:       # Commented: This is a vagrant test without SSL
nginx_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g
  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
#  gzip_proxied: "any"
#  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
#  gzip_vary: "on"
#  gzip_min_length: 128
#  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
#  gzip_types: |
#      text/plain
#      text/css
#      text/xml
#      text/javascript
#      application/javascript
#      application/x-javascript
#      application/json
#      application/xml
#      application/xml+rss
#      application/xhtml+xml
#      application/x-font-ttf
#      application/x-font-opentype
#      image/png
#      image/svg+xml
#      image/x-icon

# Commented: This is a vagrant test without SSL
#
#nginx_ssl_role: usegalaxy_eu.certbot
#nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
#nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem
